name: Deploy AWS CDK

# Controls when the action will run. 
on:
  push:
    branches: [ main ]
  #pull_request:
    #branches: [ main ]

env:
  OPENSEARCH_HOST_ENDPOINT: ${{ secrets.OPENSEARCH_HOST_ENDPOINT }}
  ESUSERNAME: ${{ secrets.ESUSERNAME }}
  ESPASSWORD: ${{ secrets.ESPASSWORD }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  aws_cdk:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::533267413906:role/GithubRoleAdmin
          role-session-name: samplerolesession

      - name: install npm
        run: 'sudo apt update -y && sudo apt install nodejs npm -y'

      - name: Install AWS CDK
        run: 'sudo npm install -g aws-cdk' 

      - name: Install Requirements 
        run: 'pip3 install -r requirements.txt'
        working-directory: .
      
      - name: Install Requirements for lf1
        run: 'pip install -r ./lambdas/ImageInquiry-lf1-frmCDK/requirements.txt --target=./layers/lf1-local-packages/python/lib/python3.11/site-packages'
        working-directory: .

      - name: Install Requirements for lf2
        run: | 
          rm -rf ./layers/lf2-local-packages/python/lib/python3.11/site-packages/*
          pip install -r ./lambdas/ImageInquiry-lf2-frmCDK/requirements.txt --target=./layers/lf2-local-packages/python/lib/python3.11/site-packages
          export SPACY_DATA=./layers/lf2-local-packages/python/lib/python3.11/site-packages
          python -m spacy download en_core_web_sm
        working-directory: .

      - name: CDK Synth
        run: cdk synth
        working-directory: .
              
      - name: CDK bootstrap
        run: cdk bootstrap
        working-directory: .

      - name: CDK Deploy
        run: cdk deploy --require-approval never
        working-directory: .
        
      # - name: CDK Destroy
      #   run: cdk destroy --force
      #   working-directory: .
